#!/usr/bin/env python3
import os
import logging
import requests
from typing import Optional, Union, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('TelegramBot')

class TelegramBot:
    def __init__(self):
        self.token = self._get_env_var('TELEGRAM_TOKEN')
        self.chat_id = self._get_env_var('TELEGRAM_CHAT_ID')
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not self.token or not self.chat_id:
            logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏/–∏–ª–∏ TELEGRAM_CHAT_ID")
            raise ValueError("–¢—Ä–µ–±—É—é—Ç—Å—è TELEGRAM_TOKEN –∏ TELEGRAM_CHAT_ID")

    def _get_env_var(self, var_name: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        value = os.getenv(var_name)
        if not value:
            logger.warning(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {var_name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return value

    def _send_request(self, method: str, payload: Dict[str, Any]) -> bool:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API"""
        try:
            response = requests.post(
                f"{self.base_url}/{method}",
                json=payload,
                timeout=10
            )
            response.raise_for_status()
            data = response.json()
            
            if not data.get('ok'):
                logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {data.get('description')}")
                return False
                
            return True
            
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False

    def send_message(
        self,
        text: str,
        parse_mode: Optional[str] = None,
        disable_web_page_preview: bool = True,
        silent: bool = False
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        payload = {
            'chat_id': self.chat_id,
            'text': text,
            'disable_web_page_preview': disable_web_page_preview,
            'disable_notification': silent
        }
        
        if parse_mode and parse_mode in ['Markdown', 'HTML']:
            payload['parse_mode'] = parse_mode
            
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {text[:50]}...")
        return self._send_request('sendMessage', payload)

    def send_document(
        self,
        file_path: str,
        caption: Optional[str] = None,
        silent: bool = False
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'rb') as file:
                files = {'document': file}
                data = {
                    'chat_id': self.chat_id,
                    'disable_notification': silent
                }
                if caption:
                    data['caption'] = caption
                    
                response = requests.post(
                    f"{self.base_url}/sendDocument",
                    files=files,
                    data=data,
                    timeout=30
                )
                response.raise_for_status()
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            return False

    def format_ci_message(
        self,
        project: str,
        status: str,
        commit_hash: str,
        commit_message: str,
        author: str,
        branch: str,
        url: str
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ CI/CD —Å–æ–±—ã—Ç–∏–∏"""
        emoji = "‚úÖ" if status.lower() == "success" else "‚ùå"
        return (
            f"{emoji} *{project.upper()} - {status.upper()}*\n\n"
            f"üîπ *–ö–æ–º–º–∏—Ç*: [{commit_hash[:7]}]({url}/commit/{commit_hash})\n"
            f"üîπ *–°–æ–æ–±—â–µ–Ω–∏–µ*: {commit_message}\n"
            f"üîπ *–í–µ—Ç–∫–∞*: `{branch}`\n"
            f"üîπ *–ê–≤—Ç–æ—Ä*: {author}\n\n"
            f"[–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏]({url}/actions)"
        )

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    bot = TelegramBot()
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message("üîî –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    
    # –ü—Ä–∏–º–µ—Ä CI-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    ci_message = bot.format_ci_message(
        project="Calculator CI",
        status="Success",
        commit_hash="a1b2c3d4e5",
        commit_message="Update calculator functions",
        author="Arabar",
        branch="main",
        url="https://github.com/user/repo"
    )
    
    bot.send_message(ci_message, parse_mode="Markdown")